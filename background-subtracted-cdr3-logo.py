from IPython.core.display import display, HTML from palmotif import compute_pal_motif, svg_logo from tcrsampler.sampler import TCRsampler
from tcrdist.regex import _matrix_to_regex
# Select the cluster to subset, selecting `1` instead of `0` in the
# previous example.
cluster_id = '1'
cluster_df = clone_df_ylq[clone_df_ylq.cluster_alpha_beta == cluster_id]
def custom_logo_routine(cluster_df, label):
# Identify the gene usage pattern for the alpha and beta chains gene_usage_alpha = cluster_df.groupby(['v_a_gene','j_a_gene']).\
size().\
reset_index().\ to_dict('split')['data']
gene_usage_beta = cluster_df.groupby(['v_b_gene','j_b_gene']).\ size().\
reset_index().\ to_dict('split')['data']
# ALPHA
# Sample a background for the alpha chain
sampled_rep_alpha = ts_alpha.sample(gene_usage_alpha, flatten = True, depth = 100) # Remove any None values that could have been generated by unknown pairs sampled_rep_alpha = [x for x in sampled_rep_alpha if x is not None]
# Compute background subtracted positionally aligned motif logo
motif, stat = compute_pal_motif(
seqs = cluster_df['cdr3_a_aa'].to_list(),
refs = sampled_rep_alpha,
centroid = cluster_df['cdr3_a_aa'].value_counts().index[0])
# Compute raw positionally aligned motif logo
background_subtracted_svg_alpha = svg_logo(motif, return_str= True).\ replace('height="100%"', 'height="20%"').\
replace('width="100%"', 'width="20%"')
# Compute raw positionally aligned motif logo
motif_raw, stat_raw = compute_pal_motif(
seqs = cluster_df['cdr3_a_aa'].to_list(),
refs = None,
centroid = cluster_df['cdr3_a_aa'].value_counts().index[0])
raw_svg_alpha = svg_logo(motif_raw, return_str= True).\ replace('height="100%"', 'height="20%"').\ replace('width="100%"', 'width="20%"')
# Generate a regeular expression from the pal motif matrix
regex_alpha = _matrix_to_regex(motif_raw,max_ambiguity=5,
# Reapeat for the the BETA chain
# Sample a background for the beta chain
sampled_rep_beta = ts_beta.sample(gene_usage_beta, flatten
# remove any None values that could have been generated by sampled_rep_beta = [x for x in sampled_rep_beta if x is not None]
# Compute background subtracted positionally aligned motif logo
motif, stat = compute_pal_motif(
seqs = cluster_df['cdr3_b_aa'].to_list(),
refs = sampled_rep_beta,
centroid = cluster_df['cdr3_b_aa'].value_counts().index[0])
background_subtracted_svg_beta = svg_logo(motif, return_str= True).\ replace('height="100%"', 'height="20%"').\ replace('width="100%"', 'width="20%"')
# Compute raw positionally aligned motif logo
motif_raw, stat_raw = compute_pal_motif(
seqs = cluster_df['cdr3_b_aa'].to_list(),
refs = None,
centroid = cluster_df['cdr3_b_aa'].value_counts().index[0])
raw_svg_beta = svg_logo(motif_raw, return_str= True).\ replace('height="100%"', 'height="20%"').\ replace('width="100%"', 'width="20%"')
regex_beta = _matrix_to_regex(motif_raw, max_ambiguity=5, ntrim=0, ctrim=0)
# Output the results as tidy html
no_wrap_div = '<div><h3>{}</h3><h5>_________alpha CDR3 Logo {}________'\ 'beta CDR3 Logo {}________________________</h5></div>'\
'<div style="white-space: nowrap">{}{}<br></br>{}{}</div>'
display(HTML(no_wrap_div.format(label, regex_alpha,regex_beta,
background_subtracted_svg_alpha, background_subtracted_svg_beta, raw_svg_alpha,raw_svg_beta)))
custom_logo_routine(cluster_df = cluster_df, label = "Cluster 1")
                                  
# If the svg_logo function is run with return_str 1⁄4 False and filename 1⁄4 “out- put_name.svg”, it can be used to write SVG vector graphics directly to a file 
